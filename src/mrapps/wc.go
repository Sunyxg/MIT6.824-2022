package main

//
// a word-count application "plugin" for MapReduce.
//
// go build -buildmode=plugin wc.go
//

import (
	"strconv"
	"strings"
	"unicode"

	"6.824/mr"
)

// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
func Map(filename string, contents string) []mr.KeyValue {
	// function to detect word separators.
	// 定义FieldsFunc切割函数，当输入字符不为字母时，进行切割
	ff := func(r rune) bool { return !unicode.IsLetter(r) }

	// split contents into an array of words.
	// 将contents切割为单词切片
	words := strings.FieldsFunc(contents, ff)

	// 遍历单词切片，将其以{word,"1"}的形式压如KeyValue切片
	kva := []mr.KeyValue{}
	for _, w := range words {
		kv := mr.KeyValue{w, "1"}
		kva = append(kva, kv)
	}
	return kva
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {
	// return the number of occurrences of this word.
	// 返回valus切片的长度的字符串表达
	return strconv.Itoa(len(values))
}
